package msg.group.testcomponents;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.*;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import msg.group.pageobjects.LandingPage;

public class BaseTest {

	public WebDriver driver;
	public LandingPage landingPage;
	
	public WebDriver initializeDriver() throws IOException {
		
		// properties class <== zieht sich automatisch die .properties-Datei
		Properties prop = new Properties();
		// Parameter: Pfad zur Input-Datei
		// user.dir - liefert der Projektpfad C:\Users\rosink\eclipse-workspace-SeleniumWebDriverWithJava\SeleniumFrameworkDesign
		FileInputStream fis = new FileInputStream(System.getProperty("user.dir") + 
				"//src//main//java//msg//group//resources//GlobalData.properties");
		prop.load(fis);
		String browserName = prop.getProperty("browser").toLowerCase();
		
		switch (browserName) {
		case "chrome": {	
			driver = new ChromeDriver();
			break;
		}
		case "firefox": {	
			driver = new FirefoxDriver();
			break;
		}
		case "edge": {	
			driver = new EdgeDriver();
			break;
		}
		default:
			driver = new ChromeDriver();
		}

		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		
		return driver;
	}
	
	// Rückgabe einer Liste mit 2 Argumenten - 1. Argument = HashMap, 2. Argument = HashMap 
	public List<HashMap<String, String>> getJsonDataToMap(String filePath) throws IOException {
		
		//read json to string
		File file = new File(filePath);
		String jsonContent = FileUtils.readFileToString(file, StandardCharsets.UTF_8);
		
		//String to HashMap using Jackson Databind (pom.xml)
		ObjectMapper mapper = new ObjectMapper();
		
		// 1. Parameter: String, der in einen HashMap konvertiert werden soll
		// 2. Parameter: besagt, wie konvertiert werden soll d.h. in der json-Datei
		// 				 ist ein Array mit 2 Indices ==> daraus werden 2 HashMaps erstellt
		//               ==> und diese 2 HashMaps werden in eine Liste gepackt
		// d.h. aus dem String wird eine Liste mit 2 HashMaps
		List<HashMap<String, String>> data = 
				mapper.readValue(jsonContent, 
						new TypeReference<List<HashMap<String, String>>>() {});
		
		return data;
	}
	
	// alwaysRun = true - wird hier angegeben, damit, wenn man Testfälle gruppiert hat
	// (wie @Test(groups = {"ErrorHandling"}) in ErrorValidationTest), die @BeforeMethod 
	// ausgeführt wird, wenn ErrorValidationTests.xml aufgerufen wird
	@BeforeMethod(alwaysRun = true)
	public LandingPage launchApplication() throws IOException {
		
		driver = initializeDriver();
		
		// Login mit Weiterleitung zum Produktkatalog
		landingPage = new LandingPage(driver);
		landingPage.goTo();

		return landingPage;
	}
	
	@AfterMethod(alwaysRun = true)
	public void tearDown() {
		driver.quit();
	}

}
